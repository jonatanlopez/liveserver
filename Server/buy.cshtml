@inherits Umbraco.Web.Mvc.UmbracoTemplatePage<ContentModels.SectionPage>
    @using ContentModels = Umbraco.Web.PublishedContentModels;

    @*@inherits Umbraco.Web.Mvc.UmbracoTemplatePage*@
    @{
    Layout = "SectionMaster.cshtml";
    }

    @* the fun starts here *@

    <!--<a class="nav-link call_search_up" s_type="https://guatemalancoffees.azurewebsites.net/umbraco/api/productiveunits/options">Explore <i class="fas fa-search"></i></a>-->

    <div id="vapp">
        <!-- *** INICIA BLOQUE DE MODAL DE BÚSQUEDA (modal_search_gral) *** -->
        <div :class="main_class" class="container-fluid">

            <!-- btn_explore.htm -->
            <!-- <div class="search_modal modalw"></div> -->
            <div>
                <a class="btn btn_float nav-link call_search_coffee" v-on:click.prevent="showFilterModal"><span>Coffee
                        lots</span><i class="fas fa-search"></i></a>
            </div>

            <!-- BLOQUE DE GRID DE RESULTADOS DE BÚSQUEDA -->
            <div class="results_block">
                <div class="row results_header">
                    <div class="col-12 col-md-8 summary_results">
                        <div>
                            <div class="num_results">{{total}}</div>
                        </div>
                        <div>
                            <div class="title_results">Results for:
                                <div class="mt-2">
                                    <div v-if="filterOptions.name">name:<span
                                            class="badge">{{filterOptions.name}}</span></div>
                                    <div>score:<span class="badge">{{filterOptions.scaMin}}</span> - <span
                                            class="badge">{{filterOptions.scaMax}}</span> </div>
                                    <div v-if="filterOptions.locations.length>0">locations: <span class="badge"
                                            v-for="item in filterOptions.locations" :key="item.id">{{item.name}}</span>
                                    </div>

                                    <div v-if="filterOptions.varieties.length > 0"> varieties: <span class="badge"
                                            v-for="item in filterOptions.varieties" :key="item.id">{{item.name}}</span>
                                    </div>
                                    <div v-if="filterOptions.processes.length > 0">processes:<span class="badge"
                                            v-for="item in filterOptions.processes" :key="item.id">{{item.name}}</span>
                                    </div>
                                    <div v-if="filterOptions.certifications.length > 0">certifications:<span
                                            class="badge" v-for="item in filterOptions.certifications"
                                            :key="item.id">{{item.name}}</span>
                                    </div>
                                </div>
                            </div>
                            <small class="form-text text-primary"><a href="#" class="collapse_filters"
                                    v-on:click="()=>this.$refs.coffeeOfferingFilter.show()">Narrow
                                    results</a></small>
                        </div>

                    </div>
                    <div class="form-inline col-12 col-md-4 justify-content-end mb-0 view_modes">
                        <!-- <a v-on:click.prevent="setView('list')" v-if="this.viewMode != 'list'"><span>list</span><i
                                    class="fas fa-list-alt"></i></a>
                            
                            <a v-on:click.prevent="setView('grid')" v-if="this.viewMode != 'grid'"><span>grid</span><i
                                    class=" fas fa-th"></i></a>
                            
                            <a v-on:click.prevent="setView('map')" v-if="this.viewMode != 'map'"><span>map</span><i
                                    class=" fas
                                fa-map-marked-alt"></i></a> -->
                        <label class="mr-sm-2 small" for="orderBy">Order by:</label>
                        <select class="custom-select custom-select-sm mb-2 mr-sm-2 mb-sm-0" id="orderBy"
                            v-model="filterOptions.sort" v-on:change="getFilteredCoffeeOfferings">
                            <option value="p|desc">Date published</option>
                            <option value="n|asc">Farm name</option>
                            <option value="s|asc">Score</option>
                        </select>
                    </div>

                </div>

                <div class="results">
                    <div :class="currentViewModeClass" v-if="dataList && dataList.length>0">
                        <!-- results_list / results_grid / results_map - class cambia de acuerdo a view mode-->
                        <div class="entry" v-for="(item, index) in dataList" :key="item.id" :data-id="item.id">
                            <div class="num_dot">{{index+1}}</div>
                            <!-- este es el bloque de cada lote de oferta en la lista -->
                            <!-- <div class="img" v-on:click="showDetails(item)"><img :src="item.coverPhoto | defaultCover" /></div> -->
                            <!-- foto de la finca -->
                            <div class="lot_nom" v-on:click="showDetails(item)">
                                <ul>
                                    <li>
                                        <h5>{{item.productiveUnitName}} </h5>
                                    </li>
                                    <li v-if="item.town">{{ item.town}}, {{ item.city}}</li>
                                    <!-- <li>varieties: <span class="badge " v-for="it in item.varieties" :key="it">{{ it }}</span></li> -->
                                    <li>
                                        <span
                                            class="small text-dark">{{item.publicationDate | moment("D-MMM-YYYY") }}</span>
                                    </li>
                                </ul>
                            </div>
                            <div class="lot_description">
                                <div>{{ item.name }} - <span v-for="it in item.varieties" :key="it">{{ it }}
                                        / </span> </div>
                                <div>{{item.location}} / {{item.warehouse}}</div>
                                <!-- {{ item.town}}, {{ item.city}} -->
                            </div>
                            <div class="lot_size">
                                <div> {{ item.quantity }} {{ item.packing }} ({{ item.sizePerUnit }}
                                    {{ item.unitOfMeasurement }})</div> <!-- TAMAÑO DEL LOTE -->
                                <small class="text-primary">{{ item.id }}</small>
                            </div>
                            <div class="lot_score">
                                <div class="num_points" lbl="points">{{item.scaScore}}</div><!-- SCORE SCAA -->
                            </div>
                            <div class="lot_actions">
                                <div class="go">
                                    <a class="detalle" v-on:click="showDetails(item)"><span>detail</span><i
                                            class="fas fa-chevron-circle-right"></i></a>
                                    <!-- <a class="flyto" v-on:click="flyTo(item)"><span>locate</span><i class="fas fa-map-marker-alt"></i></a> -->
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- <div v-if="dataList && dataList.length==0">
                            No existen unidades productivas para este criterio
                        </div> -->


                    <!-- <div class="map_results" v-if="viewMode == 'map'">
                            <div style="height: 100%; width: 100%">


                                <l-map ref="myMap" :zoom="zoom" :center="center" :options="mapOptions"
                                    v-on:update:center="centerUpdate" v-on:update:zoom="zoomUpdate">


                                    <l-marker v-for="(marker, index)  in dataList" :key="marker.id" :visible="true"
                                        :lat-lng="{lat:marker.latitude, lon:marker.longitude}"
                                        v-on:click="showDetails(marker)">

                                        <l-icon iconSize="[25, 41]" iconAnchor="[10, 44]" popupAnchor="[3, -40]"
                                            icon-url="marker-icon.png" className="number-icon"
                                            :options="{ html: `<span> ${index+1} </span>`, className: 'number-icon', iconSize: [25, 41], iconAnchor: [10, 44], popupAnchor: [3, -40]}">
                                        </l-icon>

                                        <l-tooltip :options="{ permanent: true, interactive: true }"
                                            :content=" `<span class='text-primary'>${marker.name}</span> <br/> (${marker.latitude} ${marker.longitude}) <br/> ${marker.town} - ${marker.city} ` " />
                                    </l-marker>

                                    <l-tile-layer :url="url" :attribution="attribution" />

                                </l-map>
                            </div>

                        </div> -->
                </div>
            </div>

            <!-- Filtros -->
            <b-modal id="coffeeOfferingFilter" ref="coffeeOfferingFilter" size="lg" hide-footer
                header-class="modal-header-custom" dialog-class="myModal">

                <div class="container-fluid">
                    <div class="row">
                        <div class="col-12 ">
                            <h5>Let's find your coffee!</h5>
                        </div>
                    </div>
                    <div class="row p-3">

                        <!-- Grupo de búsqueda básico -->
                        <div class="col-12" v-if="searchExtended==false">
                            <form>
                                <div class="form-group row">
                                    <input type="text" id="name" name="name" class="form-control"
                                        placeholder="Search for farm name, variety or lot description."
                                        autocomplete="on" v-model="filterOptions.name" />
                                    <!-- Muestra search_extended y oculta search_basic -->
                                    <small class="form-text text-primary mx-2"><a href="#" class="expand_filters"
                                            v-on:click.prevent="showSearchExtended">Or be more specific.</a></small>
                                </div>
                                <div class="form-group col-12 text-center">
                                    <button type="button" class="btn btn-primary"
                                        v-on:click.prevent="getFilteredCoffeeOfferings">Go</button>
                                </div>
                            </form>
                        </div>

                        <div class="col-12" v-if="searchExtended==true">
                            <form>
                                <div class="form-group row">
                                    <label for="farmName" class="col-lg-2 col-form-label pl-0">Farm name</label>
                                    <input type="text" class="col-lg-10 form-control" v-model="filterOptions.name"
                                        :disabled="loading" id="farmName">
                                </div>
                                <div class="form-group row px-0">
                                    <div class="form-inline col-lg-6 px-0">
                                        <label for="scoreMin"
                                            class="col-4 col-form-label justify-content-start pl-0">Cupping
                                            score</label>
                                        <input type="text" class="col-3 form-control" id="scoreMin"
                                            v-model="filterOptions.scaMin" :disabled="loading" placeholder="min"
                                            min="0">
                                        <label for="scoreMax" class="col-1 col-form-label">></label>
                                        <input type="text" class="col-3 form-control" id="scoreMax"
                                            v-model="filterOptions.scaMax" :disabled="loading" placeholder="max"
                                            max="100">
                                    </div>
                                    <div class="form-inline col-lg-6 px-0">
                                        <label for="listing"
                                            class="col-12 col-lg-2 col-form-label justify-content-start pl-0">Listing</label>
                                        <vue-multiselect id="listing" class="col-12 col-lg-10 px-0" :disabled="loading"
                                            v-model="filterOptions.locations" placeholder="Choose" label="name"
                                            track-by="name" :options="options['locations']" :multiple="true">
                                        </vue-multiselect>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label for="varieties" class="col-form-label col-lg-2 pl-0">Varieties</label>
                                    <vue-multiselect id="varieties" class="col-lg-10 px-0"
                                        v-model="filterOptions.varieties" placeholder="Choose varieties" label="name"
                                        track-by="id" :options="options['varieties']" :multiple="true"
                                        :disabled="loading">
                                    </vue-multiselect>
                                </div>
                                <div class="form-group row">
                                    <label for="processes" class="col-form-label col-lg-2 pl-0">Processes</label>
                                    <vue-multiselect id="processes" class="col-lg-10 px-0"
                                        v-model="filterOptions.processes" placeholder="Choose processes" label="name"
                                        track-by="id" :options="options['processes']" :multiple="true"
                                        :disabled="loading">
                                    </vue-multiselect>
                                </div>
                                <div class="form-group row">
                                    <label for="certifications"
                                        class="col-form-label col-lg-2 pl-0">Certifications</label>
                                    <vue-multiselect id="certifications" class="col-lg-10 px-0"
                                        v-model="filterOptions.certifications" placeholder="Choose certifications"
                                        label="name" track-by="id" :options="options['certifications']" :multiple="true"
                                        :disabled="loading">
                                    </vue-multiselect>

                                </div>
                                <div class="form-group row">
                                    <!-- Oculta search_extended y muestra search_basic -->
                                    <small class="form-text text-primary mx-2">
                                        <a href="#" v-on:click.prevent="clearSearchExtended"
                                            class="collapse_filters">Clear filters</a>
                                    </small>
                                </div>
                                <div class="form-group col-12 text-center">
                                    <button type="button" class="btn btn-primary"
                                        v-on:click.prevent="getFilteredCoffeeOfferings">Go!</button>
                                </div>
                            </form>
                        </div>


                    </div>
                </div>
            </b-modal>

            <!-- Detalles -->
            <b-modal id="coffeeOfferingDetails" ref="coffeeOfferingDetails" size="xl" hide-footer
                header-class="modal-header-custom" dialog-class="modal_unit">
                <div class="col">
                    <div class="num_results">{{ item.id}}<div class="lotlbl" lbl="lot ID"></div>
                    </div> <!-- lbl indica texto a mostrar -->
                    <div class="num_points f_right" lbl="points">{{item.scaScore}}</div> <!-- SCORE SCAA -->
                </div>
                <div class="row ">
                    <!-- columna central - info lote -->
                    <div class="col col-md-10 mx-auto">
                        <div class="row p_header">
                            <div class="col-12 col-sm-6 nom">
                                <ul>
                                    <li class="tx_blue">Coffee lot</li>
                                    <li>
                                        <h3>{{item.name}}</h3> <!-- NOMBRE DEL LOTE DE CAFÉ -->
                                    </li>
                                    <li>{{ item.quantity }} {{ item.packing }} ({{ item.sizePerUnit }}
                                        {{ item.unitOfMeasurement }})</li> <!-- TAMAÑO DEL LOTE -->
                                </ul>
                            </div>

                            <div class="col-12 col-sm-6 text-right certifications">
                                <img v-for="it in item.certifications" :key="it.id" :src="`images/cert_${it.id}.png`">
                            </div>
                            <!-- <div class="tag_area"><span class="tag bg1">green apple</span><span
                                        class="tag bg2">caramel</span><span class="tag bg2">almonds</span><span
                                        class="tag bg3">raspberry</span></div> -->
                            <div class="tag_area"><span class="tag bg1" v-for="it in item.tags"
                                    :key="it">{{ it }}</span></div>
                        </div>

                        <div class="row p_header">
                            <div class="col-12 col-sm-6">

                                <div class="farm_facts">
                                    <ul>
                                        <li>Varieties: <span class="badge " v-for="it in item.varieties"
                                                :key="it">{{ it }}</span></li>
                                        <li>Process: <span class="badge">{{item.process}}</span></li>
                                        <li>Drying: <span class="badge">{{item.drying}}</span></li>
                                    </ul>

                                </div>

                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="farm_facts text-left text-sm-right pl-5 pl-sm-0">
                                    <ul>
                                        <li>Packaging: <span class="badge">{{ item.packing }}</span></li>
                                        <li>Listing: <span class="badge">{{ item.location }}</span></li>
                                        <li>Warehouse: <span class="badge">{{ item.warehouse }}</span>
                                        </li>
                                    </ul>

                                </div>
                            </div>

                        </div>
                        <div class="row p_origin">
                            <div class="tx_blue">Origin</div>
                            <h5>{{ item.productiveUnitName }}</h5>
                            <div>{{ item.town}}, {{ item.city}}</div>

                            <div class="col-12 summary_text">{{ item.productiveUnitDescription }}</div>
                            <div class="col-12 text-center">
                                <b-btn variant="link" class="small tx_blue" v-on:click.prevent="viewFarmProfile(item)">
                                    view farm profile</b-btn>
                            </div>
                        </div>
                        <div class="row my-5">
                            <div class="col-2 col-sm-1 text-center">
                                <button class="btn btn-block text-primary" v-on:click.prevent="showContactModal(item)">
                                    <i class="fas fa-2x fa-envelope"></i></button>
                            </div>
                            <div class="col">
                                <div class="row"><span v-for="it in item.email" :key="it">{{ it }}</span></div>
                                <div class="row"><span v-for="it in item.phones" :key="it">{{ it }}</span></div>
                            </div>
                            <div class="col-4 col-sm-3 text-right pr-4">
                                <button class="btn btn-primary btn-sm" type="submit"
                                    v-on:click.prevent="showRequestSampleModal(item)">Request sample</button>
                            </div>
                            <!-- <div>
                                <span class="text-secondary">Contact .</span>
                                {{ item.website}}
                                <br /> phones.
                                <span v-for="it in item.phones" :key="it">{{ it}}</span>
                                <br /> emails.
                                <span v-for="it in item.email" :key="it">{{ it}}</span>
                            </div> -->
                        </div>

                    </div>
                </div>




            </b-modal>

            <!-- Request Sample -->
            <b-modal id="requestSampleModal" ref="requestSampleModal" size="lg" hide-footer
                header-class="modal-header-custom">

                <div class="num_results float-right">{{item.id}}<div lbl="lot ID" class="lotlbl"></div>
                </div>

                <div class="row p_header">
                    <div class="col-md-12">
                        <div class="tx_blue">Sample Request</div>
                        <h3>{{item.name}}</h3>
                    </div>
                </div>

                <div class="row">



                    <div class="col col-md-10 mx-auto">



                        <form>
                            <div class="form-group row">
                                <label for="name" class="col-lg-3 col-form-label text-right text-black-50">Name</label>
                                <input type="text" class="col-lg-9 form-control" v-model="requestSampleFormData.name"
                                    :disabled="loading" id="name">
                            </div>

                            <div class="form-group row">
                                <label for="company"
                                    class="col-lg-3 col-form-label text-right text-black-50">Company</label>
                                <input type="text" class="col-lg-9 form-control" v-model="requestSampleFormData.company"
                                    :disabled="loading" id="company">
                            </div>

                            <div class="form-group row">
                                <label for="phone"
                                    class="col-lg-3 col-form-label text-right text-black-50">Phone</label>
                                <input type="text" class="col-lg-9 form-control" v-model="requestSampleFormData.phone"
                                    :disabled="loading" id="phone">

                            </div>

                            <div class="form-group row">
                                <label for="emailAddress"
                                    class="col-lg-3 col-form-label text-right text-black-50">Email</label>
                                <input type="text" class="col-lg-9 form-control" v-model="requestSampleFormData.emailAddress"
                                    :disabled="loading" id="emailAddress">
                            </div>

                            <div class="form-group row">
                                <label for="address"
                                    class="col-lg-3 col-form-label text-right text-black-50">Address</label>
                                <input type="text" class="col-lg-9 form-control" v-model="requestSampleFormData.address"
                                    :disabled="loading" id="address">
                            </div>

                            <div class="form-group row">
                                <label for="country"
                                    class="col-lg-3 col-form-label text-right text-black-50">Country</label>
                                <input type="text" class="col-lg-9 form-control" v-model="requestSampleFormData.country"
                                    :disabled="loading" id="country">
                            </div>

                            <div class="form-group row">
                                <label for="message"
                                    class="col-lg-3 col-form-label text-right text-black-50">Message</label>
                                <textarea rows="5" class="col-lg-9 form-control" v-model="requestSampleFormData.message"
                                    :disabled="loading" id="message"></textarea>
                            </div>

                            <div class="form-group col-12 text-center">
                                <button type="button" class="btn btn-primary"
                                    v-on:click.prevent="onRequestSample">Request</button>
                            </div>

                        </form>
                    </div>
                </div>
            </b-modal>

            <!-- Contact -->

            <b-modal id="contactModal" ref="contactModal" size="lg" hide-footer header-class="modal-header-custom">

                <div class="row p_header">
                    <div class="col-md-12  text-center">
                        <div class="tx_blue">Contact</div>
                        <h3>{{item.productiveUnitName}}</h3>
                        <div class="small">{{ item.town}}, {{ item.city}}</div>

                    </div>
                </div>

                <div class="row">



                    <div class="col col-md-10 mx-auto">


                        <form>
                            <div class="form-group row">
                                <label for="firstName" class="col-lg-3 col-form-label text-right text-black-50">First
                                    Name</label>
                                <input type="text" class="col-lg-9 form-control" v-model="contactFormData.firstName"
                                    :disabled="loading" id="firstName">
                            </div>

                            <div class="form-group row">
                                <label for="lastName" class="col-lg-3 col-form-label text-right text-black-50">Last
                                    Name</label>
                                <input type="text" class="col-lg-9 form-control" v-model="contactFormData.lastName"
                                    :disabled="loading" id="lastName">
                            </div>


                            <div class="form-group row">
                                <label for="emailAddress"
                                    class="col-lg-3 col-form-label text-right text-black-50">Email</label>
                                <input type="text" class="col-lg-9 form-control" v-model="contactFormData.emailAddress"
                                    :disabled="loading" id="emailAddress">
                            </div>


                            <div class="form-group row">
                                <label for="message"
                                    class="col-lg-3 col-form-label text-right text-black-50">Message</label>
                                <textarea rows="5" class="col-lg-9 form-control" v-model="contactFormData.message"
                                    :disabled="loading" id="message">

                        </textarea>
                            </div>

                            <div class="form-group col-12 text-center">
                                <button type="button" class="btn btn-primary"
                                    v-on:click.prevent="onContact">Submit</button>
                            </div>

                        </form>

                    </div>
                </div>

            </b-modal>


        </div>
        <!-- *** FINALIZA BLOQUE DE MODAL DE BÚSQUEDA *** -->

        <div class="container-fluid content_block">
            <!-- CONTENIDO DE WP -->
            @Html.Partial("Carousel")
            <section class="section">
                <div class="container">
                    @Html.GetGridHtml(Model.Content, "bodyText", "bootstrap3-fluid")
                </div>
            </section>
        </div>

    </div>


    <script type="text/javascript">
        var endPoint = '/umbraco';
        var imagesEndPoint = 'https://coffeesearch.azurewebsites.net';

        numeral.register("locale", "gt", {
            delimiters: {
                thousands: ",",
                decimal: "."
            },
            abbreviations: {
                thousand: "k",
                million: "m",
                billion: "b",
                trillion: "t"
            },
            ordinal: function (number) {
                return number === 1 ? "er" : "ero";
            },
            currency: {
                symbol: "Q"
            }
        });

        numeral.locale("gt");

        Vue.filter("number", function (value) {
            return numeral(value).format("0,0.00");
        });


        // register globally
        Vue.component('vue-multiselect', window.VueMultiselect.default)

        const markerOptions = {
            html: `<span class=\'fa-layers fa-fw\'><i class=\'fas fa-lg fa-map-marker text-primary\'></i><span class=\'fa-layers-text\'' style=\'font-weight:900\' class=\'text-secondary\'>{{marker.id}}</span></span>`
        };

        const vueApp = new Vue({
            el: '#vapp',
            components: {
                LMap: window.Vue2Leaflet.LMap,
                LTileLayer: window.Vue2Leaflet.LTileLayer,
                LMarker: window.Vue2Leaflet.LMarker,
                LPopup: window.Vue2Leaflet.LPopup,
                LTooltip: window.Vue2Leaflet.LTooltip,
                LIcon: window.Vue2Leaflet.LIcon,
            },
            data() {
                return {
                    currentPage: 1,
                    numberOfPages: 1,
                    total: 0,
                    loading: false,
                    detailsLoading: false,
                    display: 'redbox',
                    showFiltersFlag: false,
                    serverRoot: endPoint,
                    item: {},
                    dataList: null,
                    optionsSelected: {
                        "awards": [],
                        "certifications": [],
                        "cities": [],
                        "processes": [],
                        "regions": [],
                        "shades": [],
                        "varieties": [],
                        "soils": [],
                        "dryings": []
                    },

                    filterOptions: {
                        "name": "",
                        "scaMin": 0,
                        "scaMax": 100,
                        "processes": [],
                        "varieties": [],
                        "certifications": [],
                        "locations": [],
                        "pageSize": 25,
                        "sort": "p|desc",
                        "page": 1
                    },

                    options: {
                        "awards": [],
                        "certifications": [],
                        "cities": [],
                        "processes": [],
                        "regions": [],
                        "shades": [],
                        "varieties": [],
                        "soils": [],
                        "dryings": []
                    },
                    zoom: 8,
                    center: L.latLng(15.850404, -90.362389),
                    url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
                    withPopup: L.latLng(15.866242, -90.203247),
                    withTooltip: L.latLng(15.866242, -90.203247),
                    currentZoom: 8,
                    currentCenter: L.latLng(15.850404, -90.362389),
                    showParagraph: false,
                    mapOptions: {
                        zoomSnap: 0.5
                    },

                    showMap: false,
                    searchExtended: false,
                    viewMode: 'list',
                    currentViewModeClass: "results_list", //results_list / results_grid / results_map  

                    markers: [],

                    main_class: "search_block_off",

                    slide: 0,

                    showCover: true,
                    showInMap: false,
                    showGallery: false,


                    requestSampleFormData: {
                        name: "",
                        company: "",
                        phone: "",
                        emailAddress: "",
                        address: "",
                        country: "",
                        message: "",
                        coffeeOfferingId: 0,
                        productiveUnitId: 0,
                        affiliateId: 0
                    },

                    contactFormData: {
                        firstName: "",
                        lastName: "",
                        emailAddress: "",
                        message: "",
                        productiveUnitId: 0,
                        affiliateId: 0
                    }
                }
            },

            filters: {
                pretty: function (value) {
                    return JSON.stringify(JSON.parse(value), null, 2);
                },
                defaultCover(fileName) {
                    if (fileName == null || fileName == "") {
                        return `${imagesEndPoint}/uploads/coverPhoto.png`;
                    } else {
                        return `${imagesEndPoint}/uploads/${fileName}`;
                    }
                },
                moment: function (date, format) {
                    return moment(date).format(format);
                }
            },

            methods: {
                viewFarmProfile(item) {

                    this.$refs.coffeeOfferingDetails.hide();
                    this.$refs.coffeeOfferingFilter.hide();
                    this.$refs.requestSampleModal.hide();


                    // this.$refs.contactModal.show();

                },


                showRequestSampleModal(item) {

                    this.$refs.coffeeOfferingDetails.hide();
                    this.$refs.coffeeOfferingFilter.hide();
                    this.$refs.contactModal.hide();

                    this.$refs.requestSampleModal.show();

                },

                onRequestSample() {

                    this.requestSampleFormData.coffeeOfferingId = this.item.id;
                    this.requestSampleFormData.affiliateId = this.item.affiliateId;
                    this.requestSampleFormData.productiveUnitId = this.item.productiveUnitId;

                    this.loading = true;
                    axios
                        .post(`${endPoint}/api/coffeeofferings/requestsample`, this.requestSampleFormData, {
                            headers: {
                                'XYZComponent': 'XYZComponent'
                            }
                        })
                        .then(response => {
                            this.loading = false;
                            this.$refs.requestSampleModal.hide();
                            alert('Sample Requested!');
                        })
                        .catch(error => {
                            alert('Error requesting sample');
                            this.loading = false;
                        });
                },


                showContactModal(item) {
                    this.$refs.coffeeOfferingDetails.hide();
                    this.$refs.coffeeOfferingFilter.hide();
                    this.$refs.requestSampleModal.hide();
                    this.$refs.contactModal.show();

                },




                onContact() {
                    this.loading = true;

                    this.contactFormData.affiliateId = this.item.affiliateId;
                    this.contactFormData.productiveUnitId = this.item.productiveUnitId;

                    axios
                        .post(`${endPoint}/api/productiveunits/contact`, this.contactFormData, {
                            headers: {
                                'XYZComponent': 'XYZComponent'
                            }
                        })
                        .then(response => {
                            this.loading = false;
                            this.$refs.contactModal.hide();
                            alert('Su mensaje ha sido recibido!');

                        })
                        .catch(error => {
                            alert('Error');
                            this.loading = false;
                        });
                },



                setView(mode) {

                    this.viewMode = mode;

                    //results_list / results_grid / results_map  

                    switch (mode) {
                        case "list":
                            this.currentViewModeClass = "results_list";
                            break;
                        case "grid":
                            this.currentViewModeClass = "results_grid";
                            break;
                        case "map":
                            //this.showMap = true;
                            this.currentViewModeClass = "results_map";
                            break;

                    }


                },

                flyTo(marker) {

                    this.$nextTick(() => {

                        let loc = {
                            lat: marker.latitude,
                            lon: marker.longitude
                        };

                        // console.log("flying to...", loc);

                        // console.log(this.$refs.myMap.mapObject);


                        this.$refs.myMap.mapObject.flyTo(loc, 13);

                    })
                },

                alert(marker) {
                    alert(marker.id + '-' + marker.name);
                },

                showSearchExtended() {
                    this.searchExtended = true;
                },

                clearSearchExtended() {

                    this.filterOptions = {
                        "name": "",
                        "scaMin": 0,
                        "scaMax": 100,
                        "processes": [],
                        "varieties": [],
                        "certifications": [],
                        "locations": [],
                        "pageSize": 25,
                        "sort": "p|desc",
                        "page": 1
                    };

                    this.searchExtended = false;
                },

                toggleFilters() {
                    this.showFiltersFlag = !this.showFiltersFlag;
                },

                showFilterModal() {

                    this.filterOptions = {
                        "name": "",
                        "scaMin": 0,
                        "scaMax": 100,
                        "processes": [],
                        "varieties": [],
                        "certifications": [],
                        "locations": [],
                        "pageSize": 25,
                        "sort": "p|desc",
                        "page": 1
                    };

                    this.dataList = null;

                    this.searchExtended = false;
                    this.main_class = "search_block_off";
                    this.$refs.coffeeOfferingDetails.hide();
                    this.$refs.coffeeOfferingFilter.show();

                },

                showDetails(item) {
                    //getone/
                    this.detailsLoading = true;

                    this.setShowCover();


                    axios
                        .get(`${endPoint}/api/coffeeofferings/getone/${item.id}`)
                        .then(response => {
                            this.item = response.data;
                            this.detailsLoading = false;
                            this.$refs.coffeeOfferingDetails.show();
                        })
                        .catch(error => {
                            this.detailsLoading = false;
                        });



                },


                getAllCoffeeOfferings() {
                    // this.loading = true;
                    axios
                        .get(`${endPoint}/api/coffeeofferings/getall`)
                        .then(response => {
                            this.dataList = response.data;
                            // this.loading = false;
                        })
                        .catch(error => {
                            // this.loading = false;
                        });
                },

                getFilteredCoffeeOfferings() {
                    this.loading = true;
                    axios
                        .post(`${endPoint}/api/coffeeofferings/filter`, this.filterOptions)
                        .then(response => {
                            this.dataList = response.data.data;
                            this.total = response.data.total;
                            this.currentPage = response.data.currentPage;
                            this.numberOfPages = response.data.lastPage;
                            this.loading = false;
                            this.$refs.coffeeOfferingFilter.hide();
                            this.main_class = "search_block";
                        })
                        .catch(error => {
                            this.loading = false;
                        });
                },

                searchCoffeeOfferings() {
                    // this.loading = true;
                    axios
                        .get(
                            `${endPoint}/api/coffeeofferings/search?q=${this.filterOptions.name}`
                        )
                        .then(response => {
                            this.dataList = response.data;
                            // this.loading = false;
                            this.$refs.coffeeOfferingFilter.hide();
                        })
                        .catch(error => {
                            // this.loading = false;
                        });
                },


                getCoffeeOfferingsOptions() {
                    // this.loading = true;
                    axios
                        .get(`${endPoint}/api/coffeeofferings/options`)
                        .then(response => {
                            this.options = response.data;
                            // this.loading = false;
                        })
                        .catch(error => {
                            // this.loading = false;
                        });
                },

                addProperty(propertyName) {
                    console.log(this.optionsSelected[propertyName]);
                },

                zoomUpdate(zoom) {
                    this.currentZoom = zoom;
                },
                centerUpdate(center) {
                    this.currentCenter = center;
                },


                setShowInMap() {

                    if (this.showInMap) {
                        this.showInMap = false;
                        this.showGallery = false;
                        this.showCover = true;
                    } else {

                        this.showInMap = true;
                        this.showGallery = false;
                        this.showCover = false;
                    }
                },
                setShowGallery() {
                    if (this.item.gallery.length > 0) {

                        if (this.showInMap) {
                            this.showInMap = false;
                            this.showGallery = false;
                            this.showCover = true;
                        } else {
                            this.showInMap = false;
                            this.showGallery = true;
                            this.showCover = false;
                        }
                    }
                },
                setShowCover() {
                    this.showInMap = false;
                    this.showGallery = false;
                    this.showCover = true;
                },
            },

            mounted() {
                this.getCoffeeOfferingsOptions();
                // this.getFilteredCoffeeOfferings();
            }


        })
    </script>